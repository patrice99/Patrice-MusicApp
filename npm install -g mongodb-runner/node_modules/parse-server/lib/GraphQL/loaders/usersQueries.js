"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserFromSessionToken = exports.load = void 0;

var _graphql = require("graphql");

var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));

var _node = _interopRequireDefault(require("parse/node"));

var _rest = _interopRequireDefault(require("../../rest"));

var _Auth = _interopRequireDefault(require("../../Auth"));

var _parseClassTypes = require("./parseClassTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getUserFromSessionToken = async (config, info, queryInfo, keysPrefix, validatedToken) => {
  if (!info || !info.sessionToken) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }

  const sessionToken = info.sessionToken;
  const selectedFields = (0, _graphqlListFields.default)(queryInfo).filter(field => field.startsWith(keysPrefix)).map(field => field.replace(keysPrefix, ''));
  const keysAndInclude = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
  const {
    keys
  } = keysAndInclude;
  let {
    include
  } = keysAndInclude;

  if (validatedToken && !keys && !include) {
    return {
      sessionToken
    };
  } else if (keys && !include) {
    include = 'user';
  }

  const options = {};

  if (keys) {
    options.keys = keys.split(',').map(key => `user.${key}`).join(',');
  }

  if (include) {
    options.include = include.split(',').map(included => `user.${included}`).join(',');
  }

  const response = await _rest.default.find(config, _Auth.default.master(config), '_Session', {
    sessionToken
  }, options, info.clientVersion);

  if (!response.results || response.results.length == 0 || !response.results[0].user) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  } else {
    const user = response.results[0].user;
    return {
      sessionToken,
      user
    };
  }
};

exports.getUserFromSessionToken = getUserFromSessionToken;

const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }

  parseGraphQLSchema.addGraphQLQuery('viewer', {
    description: 'The viewer query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),

    async resolve(_source, _args, context, queryInfo) {
      try {
        const {
          config,
          info
        } = context;
        return await getUserFromSessionToken(config, info, queryInfo, 'user.', false);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  }, true, true);
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HcmFwaFFML2xvYWRlcnMvdXNlcnNRdWVyaWVzLmpzIl0sIm5hbWVzIjpbImdldFVzZXJGcm9tU2Vzc2lvblRva2VuIiwiY29uZmlnIiwiaW5mbyIsInF1ZXJ5SW5mbyIsImtleXNQcmVmaXgiLCJ2YWxpZGF0ZWRUb2tlbiIsInNlc3Npb25Ub2tlbiIsIlBhcnNlIiwiRXJyb3IiLCJJTlZBTElEX1NFU1NJT05fVE9LRU4iLCJzZWxlY3RlZEZpZWxkcyIsImZpbHRlciIsImZpZWxkIiwic3RhcnRzV2l0aCIsIm1hcCIsInJlcGxhY2UiLCJrZXlzQW5kSW5jbHVkZSIsImtleXMiLCJpbmNsdWRlIiwib3B0aW9ucyIsInNwbGl0Iiwia2V5Iiwiam9pbiIsImluY2x1ZGVkIiwicmVzcG9uc2UiLCJyZXN0IiwiZmluZCIsIkF1dGgiLCJtYXN0ZXIiLCJjbGllbnRWZXJzaW9uIiwicmVzdWx0cyIsImxlbmd0aCIsInVzZXIiLCJsb2FkIiwicGFyc2VHcmFwaFFMU2NoZW1hIiwiaXNVc2Vyc0NsYXNzRGlzYWJsZWQiLCJhZGRHcmFwaFFMUXVlcnkiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJHcmFwaFFMTm9uTnVsbCIsInZpZXdlclR5cGUiLCJyZXNvbHZlIiwiX3NvdXJjZSIsIl9hcmdzIiwiY29udGV4dCIsImUiLCJoYW5kbGVFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsdUJBQXVCLEdBQUcsT0FDOUJDLE1BRDhCLEVBRTlCQyxJQUY4QixFQUc5QkMsU0FIOEIsRUFJOUJDLFVBSjhCLEVBSzlCQyxjQUw4QixLQU0zQjtBQUNILE1BQUksQ0FBQ0gsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0ksWUFBbkIsRUFBaUM7QUFDL0IsVUFBTSxJQUFJQyxjQUFNQyxLQUFWLENBQ0pELGNBQU1DLEtBQU4sQ0FBWUMscUJBRFIsRUFFSix1QkFGSSxDQUFOO0FB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Q0MsSUFGa0MsRUFHbENDLFNBSGtDLEVBSWxDLE9BSmtDLEVBS2xDLEtBTGtDLENBQXBDO0FBT0QsT0FURCxDQVNFLE9BQU8wQyxDQUFQLEVBQVU7QUFDVlgsUUFBQUEsa0JBQWtCLENBQUNZLFdBQW5CLENBQStCRCxDQUEvQjtBQUNEO0FBQ0Y7O0FBakJILEdBRkYsRUFxQkUsSUFyQkYsRUFzQkUsSUF0QkY7QUF3QkQsQ0E3QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMTm9uTnVsbCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IGdldEZpZWxkTmFtZXMgZnJvbSAnZ3JhcGhxbC1saXN0LWZpZWxkcyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgcmVzdCBmcm9tICcuLi8uLi9yZXN0JztcbmltcG9ydCBBdXRoIGZyb20gJy4uLy4uL0F1dGgnO1xuaW1wb3J0IHsgZXh0cmFjdEtleXNBbmRJbmNsdWRlIH0gZnJvbSAnLi9wYXJzZUNsYXNzVHlwZXMnO1xuXG5jb25zdCBnZXRVc2VyRnJvbVNlc3Npb25Ub2tlbiA9IGFzeW5jIChcbiAgY29uZmlnLFxuICBpbmZvLFxuICBxdWVyeUluZm8sXG4gIGtleXNQcmVmaXgsXG4gIHZhbGlkYXRlZFRva2VuXG4pID0+IHtcbiAgaWYgKCFpbmZvIHx8ICFpbmZvLnNlc3Npb25Ub2tlbikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTixcbiAgICAgICdJbnZhbGlkIHNlc3Npb24gdG9rZW4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBzZXNzaW9uVG9rZW4gPSBpbmZvLnNlc3Npb25Ub2tlbjtcbiAgY29uc3Qgc2VsZWN0ZWRGaWVsZHMgPSBnZXRGaWVsZE5hbWVzKHF1ZXJ5SW5mbylcbiAgICAuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnN0YXJ0c1dpdGgoa2V5c1ByZWZpeCkpXG4gICAgLm1hcChmaWVsZCA9PiBmaWVsZC5yZXBsYWNlKGtleXNQcmVmaXgsICcnKSk7XG5cbiAgY29uc3Qga2V5c0FuZEluY2x1ZGUgPSBleHRyYWN0S2V5c0FuZEluY2x1ZGUoc2VsZWN0ZWRGaWVsZHMpO1xuICBjb25zdCB7IGtleXMgfSA9IGtleXNBbmRJbmNsdWRlO1xuICBsZXQgeyBpbmNsdWRlIH0gPSBrZXlzQW5kSW5jbHVkZTtcblxuICBpZiAodmFsaWRhdGVkVG9rZW4gJiYgIWtleXMgJiYgIWluY2x1ZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgIH07XG4gIH0gZWxzZSBpZiAoa2V5cyAmJiAhaW5jbHVkZSkge1xuICAgIGluY2x1ZGUgPSAndXNlcic7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmIChrZXlzKSB7XG4gICAgb3B0aW9ucy5rZXlzID0ga2V5c1xuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoa2V5ID0+IGB1c2VyLiR7a2V5fWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG4gIGlmIChpbmNsdWRlKSB7XG4gICAgb3B0aW9ucy5pbmNsdWRlID0gaW5jbHVkZVxuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoaW5jbHVkZWQgPT4gYHVzZXIuJHtpbmNsdWRlZH1gKVxuICAgICAgLmpvaW4oJywnKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzdC5maW5kKFxuICAgIGNvbmZpZyxcbiAgICBBdXRoLm1hc3Rlcihjb25maWcpLFxuICAgICdfU2Vzc2lvbicsXG4gICAgeyBzZXNzaW9uVG9rZW4gfSxcbiAgICBvcHRpb25zLFxuICAgIGluZm8uY2xpZW50VmVyc2lvblxuICApO1xuICBpZiAoXG4gICAgIXJlc3BvbnNlLnJlc3VsdHMgfHxcbiAgICByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwIHx8XG4gICAgIXJlc3BvbnNlLnJlc3VsdHNbMF0udXNlclxuICApIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5JTlZBTElEX1NFU1NJT05fVE9LRU4sXG4gICAgICAnSW52YWxpZCBzZXNzaW9uIHRva2VuJ1xuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdXNlciA9IHJlc3BvbnNlLnJlc3VsdHNbMF0udXNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgc2Vzc2lvblRva2VuLFxuICAgICAgdXNlcixcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBsb2FkID0gcGFyc2VHcmFwaFFMU2NoZW1hID0+IHtcbiAgaWYgKHBhcnNlR3JhcGhRTFNjaGVtYS5pc1VzZXJzQ2xhc3NEaXNhYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBhcnNlR3JhcGhRTFNjaGVtYS5hZGRHcmFwaFFMUXVlcnkoXG4gICAgJ3ZpZXdlcicsXG4gICAge1xuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICdUaGUgdmlld2VyIHF1ZXJ5IGNhbiBiZSB1c2VkIHRvIHJldHVybiB0aGUgY3VycmVudCB1c2VyIGRhdGEuJyxcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChwYXJzZUdyYXBoUUxTY2hlbWEudmlld2VyVHlwZSksXG4gICAgICBhc3luYyByZXNvbHZlKF9zb3VyY2UsIF9hcmdzLCBjb250ZXh0LCBxdWVyeUluZm8pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IGNvbmZpZywgaW5mbyB9ID0gY29udGV4dDtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4oXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICBpbmZvLFxuICAgICAgICAgICAgcXVlcnlJbmZvLFxuICAgICAgICAgICAgJ3VzZXIuJyxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHBhcnNlR3JhcGhRTFNjaGVtYS5oYW5kbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIHRydWUsXG4gICAgdHJ1ZVxuICApO1xufTtcblxuZXhwb3J0IHsgbG9hZCwgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4gfTtcbiJdfQ==