"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RedisCacheAdapter = void 0;

var _redis = _interopRequireDefault(require("redis"));

var _logger = _interopRequireDefault(require("../../../logger"));

var _KeyPromiseQueue = require("./KeyPromiseQueue");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds

const FLUSH_DB_KEY = '__flush_db__';

function debug() {
  _logger.default.debug.apply(_logger.default, ['RedisCacheAdapter', ...arguments]);
}

const isValidTTL = ttl => typeof ttl === 'number' && ttl > 0;

class RedisCacheAdapter {
  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.ttl = isValidTTL(ttl) ? ttl : DEFAULT_REDIS_TTL;
    this.client = _redis.default.createClient(redisCtx);
    this.queue = new _KeyPromiseQueue.KeyPromiseQueue();
  }

  get(key) {
    debug('get', key);
    return this.queue.enqueue(key, () => new Promise(resolve => {
      this.client.get(key, function (err, res) {
        debug('-> get', key, res);

        if (!res) {
          return resolve(null);
        }

        resolve(JSON.parse(res));
      });
    }));
  }

  put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', key, value, ttl);

    if (ttl === 0) {
      // ttl of zero is a logical no-op, but redis cannot set expire time of zero
      return this.queue.enqueue(key, () => Promise.resolve());
    }

    if (ttl === Infinity) {
      return this.queue.enqueue(key, () => new Promise(resolve => {
        this.client.set(key, value, function () {
          resolve();
        });
      }));
    }

    if (!isValidTTL(ttl)) {
      ttl = this.ttl;
    }

    return this.queue.enqueue(key, () => new Promise(resolve => {
      this.client.psetex(key, ttl, value, function () {
        resolve();
      });
    }));
  }

  del(key) {
    debug('del', key);
    return this.queue.enqueue(key, () => new Promise(resolve => {
      this.client.del(key, function () {
        resolve();
      });
    }));
  }

  clear() {
    debug('clear');
    return this.queue.enqueue(FLUSH_DB_KEY, () => new Promise(resolve => {
      this.client.flushdb(function () {
        resolve();
      });
    }));
  } // Used for testing


  async getAllKeys() {
    return new Promise((resolve, reject) => {
      this.client.keys('*', (err, keys) => {
        if (err) {
          reject(err);
        } else {
          resolve(keys);
        }
      });
    });
  }

}

exports.RedisCacheAdapter = RedisCacheAdapter;
var _default = RedisCacheAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9DYWNoZS9SZWRpc0NhY2hlQWRhcHRlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1JFRElTX1RUTCIsIkZMVVNIX0RCX0tFWSIsImRlYnVnIiwibG9nZ2VyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpc1ZhbGlkVFRMIiwidHRsIiwiUmVkaXNDYWNoZUFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsInJlZGlzQ3R4IiwiY2xpZW50IiwicmVkaXMiLCJjcmVhdGVDbGllbnQiLCJxdWV1ZSIsIktleVByb21pc2VRdWV1ZSIsImdldCIsImtleSIsImVucXVldWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImVyciIsInJlcyIsIkpTT04iLCJwYXJzZSIsInB1dCIsInZhbHVlIiwic3RyaW5naWZ5IiwiSW5maW5pdHkiLCJzZXQiLCJwc2V0ZXgiLCJkZWwiLCJjbGVhciIsImZsdXNoZGIiLCJnZXRBbGxLZXlzIiwicmVqZWN0Iiwia2V5cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUcsS0FBSyxJQUEvQixDLENBQXFDOztBQUNyQyxNQUFNQyxZQUFZLEdBQUcsY0FBckI7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNmQyxrQkFBT0QsS0FBUCxDQUFhRSxLQUFiLENBQW1CRCxlQUFuQixFQUEyQixDQUFDLG1CQUFELEVBQXNCLEdBQUdFLFNBQXpCLENBQTNCO0FBQ0Q7O0FBRUQsTUFBTUMsVUFBVSxHQUFHQyxHQUFHLElBQUksT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkJBLEdBQUcsR0FBRyxDQUEzRDs7QUFFTyxNQUFNQyxpQkFBTixDQUF3QjtBQUM3QkMsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQVdILEdBQUcsR0FBR1AsaUJBQWpCLEVBQW9DO0FBQzdDLFNBQUtPLEdBQUwsR0FBV0QsVUFBVSxDQUFDQyxHQUFELENBQVYsR0FBa0JBLEdBQWxC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QUosQ0FBWUMsT0FBTyxJQUFJO0FBQ3JCLFdBQUtULE1BQUwsQ0FBWXNCLE9BQVosQ0FBb0IsWUFBVztBQUM3QmIsUUFBQUEsT0FBTztBQUNSLE9BRkQ7QUFHRCxLQUpELENBSEcsQ0FBUDtBQVNELEdBcEY0QixDQXNGN0I7OztBQUNBLFFBQU1jLFVBQU4sR0FBbUI7QUFDakIsV0FBTyxJQUFJZixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVZSxNQUFWLEtBQXFCO0FBQ3RDLFdBQUt4QixNQUFMLENBQVl5QixJQUFaLENBQWlCLEdBQWpCLEVBQXNCLENBQUNmLEdBQUQsRUFBTWUsSUFBTixLQUFlO0FBQ25DLFlBQUlmLEdBQUosRUFBUztBQUNQYyxVQUFBQSxNQUFNLENBQUNkLEdBQUQsQ0FBTjtBQUNELFNBRkQsTUFFTztBQUNMRCxVQUFBQSxPQUFPLENBQUNnQixJQUFELENBQVA7QUFDRDtBQUNGLE9BTkQ7QUFPRCxLQVJNLENBQVA7QUFTRDs7QUFqRzRCOzs7ZUFvR2hCNUIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVkaXMgZnJvbSAncmVkaXMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi8uLi8uLi9sb2dnZXInO1xuaW1wb3J0IHsgS2V5UHJvbWlzZVF1ZXVlIH0gZnJvbSAnLi9LZXlQcm9taXNlUXVldWUnO1xuXG5jb25zdCBERUZBVUxUX1JFRElTX1RUTCA9IDMwICogMTAwMDsgLy8gMzAgc2Vjb25kcyBpbiBtaWxsaXNlY29uZHNcbmNvbnN0IEZMVVNIX0RCX0tFWSA9ICdfX2ZsdXNoX2RiX18nO1xuXG5mdW5jdGlvbiBkZWJ1ZygpIHtcbiAgbG9nZ2VyLmRlYnVnLmFwcGx5KGxvZ2dlciwgWydSZWRpc0NhY2hlQWRhcHRlcicsIC4uLmFyZ3VtZW50c10pO1xufVxuXG5jb25zdCBpc1ZhbGlkVFRMID0gdHRsID0+IHR5cGVvZiB0dGwgPT09ICdudW1iZXInICYmIHR0bCA+IDA7XG5cbmV4cG9ydCBjbGFzcyBSZWRpc0NhY2hlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKHJlZGlzQ3R4LCB0dGwgPSBERUZBVUxUX1JFRElTX1RUTCkge1xuICAgIHRoaXMudHRsID0gaXNWYWxpZFRUTCh0dGwpID8gdHRsIDogREVGQVVMVF9SRURJU19UVEw7XG4gICAgdGhpcy5jbGllbnQgPSByZWRpcy5jcmVhdGVDbGllbnQocmVkaXNDdHgpO1xuICAgIHRoaXMucXVldWUgPSBuZXcgS2V5UHJvbWlzZVF1ZXVlKCk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgZGVidWcoJ2dldCcsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMucXVldWUuZW5xdWV1ZShcbiAgICAgIGtleSxcbiAgICAgICgpID0+XG4gICAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgIHRoaXMuY2xpZW50LmdldChrZXksIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgICAgICBkZWJ1ZygnLT4gZ2V0Jywga2V5LCByZXMpO1xuICAgICAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVzKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHB1dChrZXksIHZhbHVlLCB0dGwgPSB0aGlzLnR0bCkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGRlYnVnKCdwdXQnLCBrZXksIHZhbHVlLCB0dGwpO1xuXG4gICAgaWYgKHR0bCA9PT0gMCkge1xuICAgICAgLy8gdHRsIG9mIHplcm8gaXMgYSBsb2dpY2FsIG5vLW9wLCBidXQgcmVkaXMgY2Fubm90IHNldCBleHBpcmUgdGltZSBvZiB6ZXJvXG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5lbnF1ZXVlKGtleSwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgIH1cblxuICAgIGlmICh0dGwgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5lbnF1ZXVlKFxuICAgICAgICBrZXksXG4gICAgICAgICgpID0+XG4gICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5zZXQoa2V5LCB2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZFRUTCh0dGwpKSB7XG4gICAgICB0dGwgPSB0aGlzLnR0bDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWV1ZS5lbnF1ZXVlKFxuICAgICAga2V5LFxuICAgICAgKCkgPT5cbiAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgdGhpcy5jbGllbnQucHNldGV4KGtleSwgdHRsLCB2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGRlbChrZXkpIHtcbiAgICBkZWJ1ZygnZGVsJywga2V5KTtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZS5lbnF1ZXVlKFxuICAgICAga2V5LFxuICAgICAgKCkgPT5cbiAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgdGhpcy5jbGllbnQuZGVsKGtleSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIGRlYnVnKCdjbGVhcicpO1xuICAgIHJldHVybiB0aGlzLnF1ZXVlLmVucXVldWUoXG4gICAgICBGTFVTSF9EQl9LRVksXG4gICAgICAoKSA9PlxuICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICB0aGlzLmNsaWVudC5mbHVzaGRiKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvLyBVc2VkIGZvciB0ZXN0aW5nXG4gIGFzeW5jIGdldEFsbEtleXMoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50LmtleXMoJyonLCAoZXJyLCBrZXlzKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKGtleXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRpc0NhY2hlQWRhcHRlcjtcbiJdfQ==